import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Embedding, LSTM, Dense
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences
import numpy as np

# ЁЯФ╣ 1. ржбрзЗржЯрж╛рж╕рзЗржЯ рждрзИрж░рж┐ (ржкрзНрж░рж╢рзНржи ржУ ржЙрждрзНрждрж░)
questions = [
    "ржЯрзНрж░рж╛ржирзНрж╕ржлрж░ржорж╛рж░ ржХрж┐",
    "рж░рзЗржЬрж┐рж╕рзНржЯрж░ ржХрж┐",
    "ржХрзНржпрж╛ржкрж╛рж╕рж┐ржЯрж░ ржХрж┐",
    "ржЗржиржбрж╛ржХрзНржЯрж░ ржХрж┐",
    "ржУрж╣ржорж╕ ржЖржЗржи ржХрж┐",
    "ржнрзЛрж▓рзНржЯрзЗржЬ ржХрж┐",
    "ржХрж╛рж░рзЗржирзНржЯ ржХрж┐",
    "рж░рзЗржЬрж┐рж╕рзНржЯрзНржпрж╛ржирзНрж╕ ржХрж┐",
    "ржПрж╕рж┐ ржХрж┐",
    "ржбрж┐рж╕рж┐ ржХрж┐"
]

answers = [
    "ржЯрзНрж░рж╛ржирзНрж╕ржлрж░ржорж╛рж░ ржПржХржЯрж┐ ржмрзИржжрзНржпрзБрждрж┐ржХ ржпржирзНрждрзНрж░ ржпрж╛ ржнрзЛрж▓рзНржЯрзЗржЬ ржкрж░рж┐ржмрж░рзНрждржи ржХрж░рзЗ",
    "рж░рзЗржЬрж┐рж╕рзНржЯрж░ ржПржХржЯрж┐ ржкрзНржпрж╛рж╕рж┐ржн ржХржорзНржкрзЛржирзЗржирзНржЯ ржпрж╛ ржмрж┐ржжрзНржпрзБрзО ржкрзНрж░ржмрж╛рж╣ рж╕рзАржорж╛ржмржжрзНржз ржХрж░рзЗ",
    "ржХрзНржпрж╛ржкрж╛рж╕рж┐ржЯрж░ ржЪрж╛рж░рзНржЬ рж╕ржВрж░ржХрзНрж╖ржг ржХрж░рзЗ ржПржмржВ рж╕ржоржпрж╝рзЗ рж╕ржоржпрж╝рзЗ ржЫрж╛ржбрж╝рзЗ",
    "ржЗржиржбрж╛ржХрзНржЯрж░ ржПржХржЯрж┐ ржкрзНржпрж╛рж╕рж┐ржн ржбрж┐ржнрж╛ржЗрж╕ ржпрж╛ ржЪрзМржорзНржмржХрзАржпрж╝ ржХрзНрж╖рзЗрждрзНрж░ рждрзИрж░рж┐ ржХрж░рзЗ",
    "ржУрж╣ржорж╕ ржЖржЗржи ржмрж▓рзЗ ржнрзЛрж▓рзНржЯрзЗржЬ рж╕ржорж╛ржи ржХрж╛рж░рзЗржирзНржЯ ржЧрзБржг рж░рзЗржЬрж┐рж╕рзНржЯрзНржпрж╛ржирзНрж╕",
    "ржнрзЛрж▓рзНржЯрзЗржЬ рж╣рж▓рзЛ ржмрзИржжрзНржпрзБрждрж┐ржХ ржкржЯрзЗржирж╢рж┐ржпрж╝рж╛рж▓ ржкрж╛рж░рзНржержХрзНржп",
    "ржХрж╛рж░рзЗржирзНржЯ рж╣рж▓рзЛ ржЗрж▓рзЗржХржЯрзНрж░ржирзЗрж░ ржкрзНрж░ржмрж╛рж╣",
    "рж░рзЗржЬрж┐рж╕рзНржЯрзНржпрж╛ржирзНрж╕ рж╣рж▓рзЛ ржмрзИржжрзНржпрзБрждрж┐ржХ ржкрзНрж░рждрж┐рж░рзЛржз",
    "ржПрж╕рж┐ рж╣рж▓рзЛ ржкрж░рж┐ржмрж░рзНрждржирж╢рзАрж▓ ржХрж╛рж░рзЗржирзНржЯ",
    "ржбрж┐рж╕рж┐ рж╣рж▓рзЛ ржзрзНрж░рзБржм ржХрж╛рж░рзЗржирзНржЯ"
]

# ЁЯФ╣ 2. ржЯрзЛржХрзЗржирж╛ржЗржЬрж╛рж░ ржУ ржкрзНржпрж╛ржбрж┐ржВ
tokenizer = Tokenizer()
tokenizer.fit_on_texts(questions + answers)

vocab_size = len(tokenizer.word_index) + 1

# ржкрзНрж░рж╢рзНржи ржУ ржЙрждрзНрждрж░ рж╕рж┐ржХрзЛржпрж╝рзЗржирзНрж╕
X = tokenizer.texts_to_sequences(questions)
y = tokenizer.texts_to_sequences(answers)

# ржкрзНржпрж╛ржб ржХрж░рж╛
maxlen = max(len(seq) for seq in X + y)
X = pad_sequences(X, maxlen=maxlen, padding='post')
y = pad_sequences(y, maxlen=maxlen, padding='post')

# y ржХрзЗ One-hot vector ржмрж╛ржирж╛ржирзЛ
y = tf.keras.utils.to_categorical(y, num_classes=vocab_size)

# ЁЯФ╣ 3. ржоржбрзЗрж▓ рждрзИрж░рж┐
model = Sequential([
    Embedding(input_dim=vocab_size, output_dim=64, input_length=maxlen),
    LSTM(128, return_sequences=True),
    Dense(vocab_size, activation='softmax')
])

model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])

# ЁЯФ╣ 4. ржЯрзНрж░рзЗржЗржирж┐ржВ
model.fit(X, y, epochs=300, verbose=0)

# ЁЯФ╣ 5. ржоржбрзЗрж▓ рж╕ржВрж░ржХрзНрж╖ржг
model.save("qa_model.h5")

# ЁЯФ╣ 6. ржЯрзЗрж╕рзНржЯ ржлрж╛ржВрж╢ржи
def answer_question(input_text):
    seq = tokenizer.texts_to_sequences([input_text])
    seq = pad_sequences(seq, maxlen=maxlen, padding='post')
    pred = model.predict(seq)
    predicted_seq = np.argmax(pred, axis=-1)[0]
    
    # ржЯрзЛржХрзЗржиржХрзЗ рж╢ржмрзНржжрзЗ рж░рзВржкрж╛ржирзНрждрж░
    reverse_word_index = dict((i, word) for word, i in tokenizer.word_index.items())
    output_text = ' '.join([reverse_word_index.get(i, '') for i in predicted_seq if i != 0])
    return output_text.strip()

# ЁЯФ╣ 7. ржЙржжрж╛рж╣рж░ржг ржЯрзЗрж╕рзНржЯ
print("ЁЯФ╣ ржкрзНрж░рж╢рзНржи: ржкрзНрж░рждрж┐рж░рзЛржз ржХрж┐")
print("тЬЕ ржЙрждрзНрждрж░:", answer_question("ржХрзНржпрж╛ржкрж╛рж╕рж┐ржЯрж░ ржХрж┐"))

print("ЁЯФ╣ ржкрзНрж░рж╢рзНржи: ржЯрзНрж░рж╛ржирзНрж╕ржлрж░ржорж╛рж░ ржХрж┐")
print("тЬЕ ржЙрждрзНрждрж░:", answer_question("ржЯрзНрж░рж╛ржирзНрж╕ржлрж░ржорж╛рж░ ржХрж┐"))
