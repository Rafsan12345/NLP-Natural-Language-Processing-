import tensorflow as tf
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences
from tensorflow.keras.models import Sequential, load_model
from tensorflow.keras.layers import Embedding, LSTM, Dense
import numpy as np

# üéØ Step 1: ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶°‡ßá‡¶ü‡¶æ‡¶∏‡ßá‡¶ü (10‡¶ü‡¶ø ‡¶¨‡¶æ‡¶ï‡ßç‡¶Ø)
sentences = [
    "‡¶Ü‡¶Æ‡¶ø ‡¶Ü‡¶ú ‡¶ñ‡ßÅ‡¶¨ ‡¶ñ‡ßÅ‡¶∂‡¶ø",
    "‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶Ü‡¶ú ‡¶∏‡ßç‡¶ï‡ßÅ‡¶≤‡ßá ‡¶Ø‡¶æ‡¶¨‡ßá",
    "‡¶Ü‡¶ú ‡¶Ü‡¶ï‡¶æ‡¶∂‡ßá ‡¶Æ‡ßá‡¶ò",
    "‡¶¨‡ßÉ‡¶∑‡ßç‡¶ü‡¶ø ‡¶™‡¶°‡¶º‡¶õ‡ßá ‡¶∏‡¶æ‡¶∞‡¶æ‡¶¶‡¶ø‡¶®",
    "‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶¨‡¶á ‡¶π‡¶æ‡¶∞‡¶ø‡¶Ø‡¶º‡ßá ‡¶ó‡ßá‡¶õ‡ßá",
    "‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶ï‡ßÄ",
    "‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶ñ‡ßÅ‡¶¨ ‡¶≠‡¶æ‡¶≤‡ßã",
    "‡¶Ü‡¶ú‡¶ï‡ßá ‡¶Ö‡¶®‡ßá‡¶ï ‡¶ó‡¶∞‡¶Æ",
    "‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶¨‡¶æ‡¶°‡¶º‡¶ø ‡¶ï‡ßã‡¶•‡¶æ‡¶Ø‡¶º",
    "‡¶Ü‡¶Æ‡¶ø ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶≠‡¶æ‡¶∑‡¶æ ‡¶≠‡¶æ‡¶≤‡ßã‡¶¨‡¶æ‡¶∏‡¶ø"
]

# üéØ Step 2: ‡¶ü‡ßã‡¶ï‡ßá‡¶®‡¶æ‡¶á‡¶ú‡ßá‡¶∂‡¶®
tokenizer = Tokenizer()
tokenizer.fit_on_texts(sentences)
total_words = len(tokenizer.word_index) + 1

# üéØ Step 3: n-gram ‡¶§‡ßà‡¶∞‡¶ø
input_sequences = []
for line in sentences:
    token_list = tokenizer.texts_to_sequences([line])[0]
    for i in range(1, len(token_list)):
        n_gram_seq = token_list[:i+1]
        input_sequences.append(n_gram_seq)

# üéØ Step 4: Padding ‡¶è‡¶¨‡¶Ç Features/Labels ‡¶≠‡¶æ‡¶ó ‡¶ï‡¶∞‡¶æ
max_seq_len = max([len(seq) for seq in input_sequences])
input_sequences = pad_sequences(input_sequences, maxlen=max_seq_len, padding='pre')
X = input_sequences[:, :-1]
y = tf.keras.utils.to_categorical(input_sequences[:, -1], num_classes=total_words)

# üéØ Step 5: ‡¶Æ‡¶°‡ßá‡¶≤ ‡¶§‡ßà‡¶∞‡¶ø
model = Sequential()
model.add(Embedding(total_words, 10, input_length=max_seq_len - 1))
model.add(LSTM(100))
model.add(Dense(total_words, activation='softmax'))

# üéØ Step 6: ‡¶ï‡¶Æ‡ßç‡¶™‡¶æ‡¶á‡¶≤ ‡¶ì ‡¶ü‡ßç‡¶∞‡ßá‡¶á‡¶®
model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])
model.fit(X, y, epochs=200, verbose=0)

# üéØ Step 7: ‡¶Æ‡¶°‡ßá‡¶≤ ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶£
model.save("bangla_text_gen.h5")

# üéØ Step 8: ‡¶ü‡ßá‡¶∏‡ßç‡¶ü - ‡¶Ü‡¶Ç‡¶∂‡¶ø‡¶ï ‡¶¨‡¶æ‡¶ï‡ßç‡¶Ø ‡¶¶‡¶ø‡ßü‡ßá ‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶¨‡¶æ‡¶ï‡ßç‡¶Ø ‡¶¨‡¶æ‡¶®‡¶æ‡¶®‡ßã
def generate_text(seed_text, next_words=3):
    for _ in range(next_words):
        token_list = tokenizer.texts_to_sequences([seed_text])[0]
        token_list = pad_sequences([token_list], maxlen=max_seq_len-1, padding='pre')
        predicted = model.predict(token_list, verbose=0)
        predicted_word_index = np.argmax(predicted)
        output_word = ""
        for word, index in tokenizer.word_index.items():
            if index == predicted_word_index:
                output_word = word
                break
        seed_text += " " + output_word
    return seed_text

# üéØ ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£
print(generate_text("‡¶Ü‡¶Æ‡¶ø"))
print(generate_text("‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶Ü‡¶ú"))

